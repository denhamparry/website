name: Check if Hugo page has been updated
permissions:
  contents: read
  issues: write
on:
  schedule:
    - cron: '0 0 * * *'
  push:
    branches:
      - main
env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  MODIFIED_DAYS: 9
  PAGE: ""
  PAGE_TITLE: ""
  PAGE_BODY: ""

jobs:
  check-updated:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: '0'
      - name: Find outdated pages
        id: outdated-pages
        run: |
          find content -type f -name "*.md" | while read -r page; do
            FILE_PATH="$page"
            LAST_COMMIT_DATE=$(git log -1 --format="%cd" --date=iso-strict "$FILE_PATH")
            echo "Last commit date on $FILE_PATH: $LAST_COMMIT_DATE"

            # Calculate the difference between the current date and the last commit date in days
            CURRENT_DATE=$(date -u +"%Y-%m-%dT%H:%M:%S%z")
            DATE_DIFF=$(($(date -u -d "$CURRENT_DATE" +%s) - $(date -u -d "$LAST_COMMIT_DATE" +%s)))
            DATE_DIFF_DAYS=$((DATE_DIFF / (60*60*24)))

            echo "Days since last commit: $DATE_DIFF_DAYS"

            # Check if the difference is more than 9 days
            if [ $DATE_DIFF_DAYS -gt "$MODIFIED_DAYS" ]; then
              echo "Page $FILE_PATH hasn't been updated for more than $MODIFIED_DAYS days"
              echo "PAGE=$FILE_PATH" >> $GITHUB_OUTPUT
              echo "PAGE_TITLE='Page $FILE_PATH hasn't been updated for $DATE_DIFF_DAYS days'" >> $GITHUB_OUTPUT
              echo "PAGE_BODY='The following page hasn't been updated for $DATE_DIFF_DAYS days: $FILE_PATH'" >> $GITHUB_OUTPUT
              echo "Create issue for page: $FILE_PATH"
            else
              echo "Page $page is up to date, it was modified $DATE_DIFF_DAYS days ago"
            fi
          done
      - name: Check and create GitHub issue if not exists
        uses: actions/github-script@v5
        if: (steps.outdated-pages.outputs.PAGE)
        with:
          script: |
            const title = 'Page out of date ${{ steps.outdated-pages.outputs.PAGE_TITLE }}';
            const body = ${{ steps.outdated-pages.outputs.PAGE_BODY }};
            const labels = ['documentation', 'help wanted'];
            // Fetch existing issues
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
            });

            // Check if an issue with the same title exists
            const existingIssue = issues.data.find(issue => issue.title === title);

            if (existingIssue) {
              console.log('Issue already exists with number:', existingIssue.number);
            } else {
              const issue = await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: title,
                body: body,
                labels: labels
              });

              console.log('Issue created with number:', issue.data.number);
            }
          github-token: ${{ secrets.GITHUB_TOKEN }}
