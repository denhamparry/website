name: Check if Hugo page has been updated
permissions:
  contents: read
  issues: write
on:
  schedule:
    - cron: '0 0 * * *'
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  MODIFIED_DAYS: -1

jobs:
  check-updated:
    runs-on: ubuntu-latest
    steps:

      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: '0'

      - name: Check and create GitHub issue if page does not exist
        uses: actions/github-script@v6
        env:
          PAGES: "${{ steps.outdated-pages.outputs.PAGES }}"
          FILENAMES: "${{ steps.outdated-pages.outputs.FILENAMES }}"
          MY_ARRAY: "${{ steps.outdated-pages.outputs.MY_ARRAY }}"
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            const util = require('util');
            const simpleGit = require('simple-git');

            const readdir = util.promisify(fs.readdir);
            const stat = util.promisify(fs.stat);

            const MODIFIED_DAYS = 30; // Set this to the number of days you want to check

            async function findMarkdownFiles(dir) {
              const files = await readdir(dir);
              return await Promise.all(
                files.map(async (file) => {
                  const filePath = path.join(dir, file);
                  const stats = await stat(filePath);

                  if (stats.isDirectory()) {
                    return findMarkdownFiles(filePath);
                  } else if (path.extname(file) === '.md') {
                    return filePath;
                  }
                })
              ).then((results) => results.flat());
            }

            async function main() {
              const directory = './content'; // Set this to the path to the content directory
              const markdownFiles = await findMarkdownFiles(directory);

              const git = simpleGit();

              for (const filePath of markdownFiles) {
                const lastCommit = await git.log({ file: filePath, n: 1 });
                const lastCommitDate = new Date(lastCommit.latest.date);

                console.log(`Last commit date on ${filePath}: ${lastCommitDate.toISOString()}`);

                const currentDate = new Date();
                const dateDiffMs = currentDate - lastCommitDate;
                const dateDiffDays = Math.floor(dateDiffMs / (1000 * 60 * 60 * 24));

                console.log(`Days since last commit: ${dateDiffDays}`);

                if (dateDiffDays > MODIFIED_DAYS) {
                  console.log(`Create issue for page: ${filePath}`);

                  // const TITLE = `Page requires review: ${filePath}`;
                  // const BODY = 'This page requires review';
                  // const LABELS = ['documentation', 'help wanted'];

                  // Add your logic to check for existing issues and create a new issue if necessary
                } else {
                  console.log(`Page ${filePath} is up to date, it was modified ${dateDiffDays} days ago`);
                }
              }
            }

            main().catch((err) => console.error(err));
